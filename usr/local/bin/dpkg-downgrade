#!/bin/bash

if [[ -z $@ ]];
then
  echo "Syntax: $(dirname $0) [packages]";
fi

declare -a packages=();
declare -a backupPackages=();

for package in "$@"
do
  echo "Checking package ${package}";

  curRelease=$(apt-cache madison ${package} | head -n 1 | cut -d '|' -f2 | tr -d '[:space:]');
  prevRelease=$(apt-cache madison ${package} | tail -n 2 | head -n 1 | cut -d '|' -f2 | tr -d '[:space:]');
  echo "Release: ${curRelease} => ${prevRelease}";
  echo;

  packages+=("${package}=${prevRelease}");
  backupPackages=("${package}=${curRelease}");
done

echo;
echo "All packages pre-selected for downgrade:";
echo ${packages[@]};

echo;
read -p "Are you sure to do this downgrade?! [n/y] " -n 1 -r;
echo;

if [[ ! $REPLY =~ ^[Yy]$ ]];
then
  echo "Skipped by user!";
  exit;
fi

backupFile=$(basename ${0%.*})_$(date '+%d%m%Y_%H%M%S').pkgs;
echo "Creating backup into $backupFile";
for package in "${backupPackages}"
do
  echo -e "${package}\t\t\t\tinstall" >> $backupFile;
done

echo;
echo "Let's do it $!";
sudo apt-get -o Dpkg::Options::="--force-overwrite pkgProblemResolver::Resolve" install -sf "${packages[@]}" -V;

