#!/bin/bash

throwError() {
	if [[ $(which zenity) ]];
	then
		zenity --error --text="$1";
	else
		echo "ERROR: $1";
	fi
}

urlDecode() {
	: "${*//+/ }"; echo -e "${_//%/\\x}";
}

urlParse() {
  local -r url=$1 url_part=$2
  #define url tokens and url regular expression
  local -r protocol='^[^:]+' user='[^:@]+' password='[^@]+' host='[^:/?#]+' \
    port='[0-9]+' path='\/([^?#]*)' query='\?([^#]+)' fragment='#(.*)'
  local -r auth="($user)(:($password))?@"
  local -r connection="($auth)?($host)(:($port))?"
  local -r url_regex="($protocol):\/\/($connection)?($path)?($query)?($fragment)?$"
  #parse url and create an array
  IFS=',' read -r -a url_arr <<< $(echo $url | awk -v OFS=, \
    "{match(\$0,/$url_regex/,a);print a[1],a[4],a[6],a[7],a[9],a[11],a[13],a[15]}")

  [[ ${url_arr[0]} ]] || { echo "Invalid URL: $url" >&2 ; return 1 ; }

  case $url_part in
    protocol) echo ${url_arr[0]} ;;
    auth)     echo ${url_arr[1]}:${url_arr[2]} ;; # ex: john.doe:1234
    user)     echo ${url_arr[1]} ;;
    password) echo ${url_arr[2]} ;;
    host-port)echo ${url_arr[3]}:${url_arr[4]} ;; #ex: example.com:8080
    host)     echo ${url_arr[3]} ;;
    port)     echo ${url_arr[4]} ;;
    path)     echo ${url_arr[5]} ;;
    query)    echo ${url_arr[6]} ;;
    fragment) echo ${url_arr[7]} ;;
    info)     echo -e "protocol:${url_arr[0]}\nuser:${url_arr[1]}\npassword:${url_arr[2]}\nhost:${url_arr[3]}\nport:${url_arr[4]}\npath:${url_arr[5]}\nquery:${url_arr[6]}\nfragment:${url_arr[7]}";;
    "")       ;; # used to validate url
    *)        throwError "Invalid URL part: $url_part" >&2 ; return 1 ;;
  esac
}


Cmd="";

# Tidy-up URL with(out) In/Complete Credentials
Url=${1/\:\/\/\:\@/://};
Url=${Url/\:\@/@};

Protocol=$(urlParse $Url protocol);
AuthUser=$(urlParse $Url user);
AuthPass=$(urlParse $Url password);
AuthPass=$(urlDecode $AuthPass);

HostName=$(urlParse $Url host);
HostPort=$(urlParse $Url port);

# Portmappings are in URL format
# /[localport:remoteip:rempteport]/[another-localport:remoteip:remoteport]
read -a portmaps <<< $(urlParse $Url path | sed 's/\// /g')

if [[ -z $HostPort ]];
then
	# Default Port
	HostPort=22;
fi

case "$Protocol" in
	ssh)	Cmd+="ssh ";
		;;
	scp)	Cmd+="scp ";
		;;
	*)	throwError "Unknown/Unsupported Protocol!";
		exit 1;
		;;
esac;

Cmd+='-o StrictHostKeyChecking=no ';
Cmd+="-p ${HostPort} ";

if [[ ! -z $AuthUser ]];
then
	Cmd+="${AuthUser}@${HostName} ";
else
	Cmd+="${HostName}";
fi

Notification="";
for portmap in ${portmaps[@]}
do
        Cmd+=" -L ${portmap}";
	Notification+="Tunneling ${portmap}\n";
done

if [[ ! -z $Notification ]];
then
	notify-send -u low "SSH" -t 10 -a $(basename $0) "${Notification}";
fi

/usr/bin/sshpass -p "${AuthPass}" $Cmd || throwError "Error executing $Cmd";
